#!/usr/bin/python3

import socket
import time
import re

# Base path for data files
base_path = "./data/"

# Taking and validating user input
user_input = input("Please enter IP address: ")
ip_pattern = r"^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$"

if not re.match(ip_pattern, user_input):
    print("Invalid IP address format. Please enter a valid IP address.")
    exit(1)

port = 1801

try:
    # Read binary files
    with open(base_path + "establish_connection.bin", "rb") as f:
        ec = f.read()

    with open(base_path + "connection_parameters.bin", "rb") as f:
        cp = f.read()

    with open(base_path + "user_message.bin", "rb") as f:
        um = f.read()
        data = bytearray(um)

    # Uncomment if session acknowledgment is required
    with open(base_path + "session_acknowledgment.bin", "rb") as f:
        sa = f.read()

    # Establish socket connection
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
        sock.connect((user_input, port))

        # Sending Establish Connection data
        sock.sendall(ec)
        print("[+] Establish connection sent.")
        response = sock.recv(1024)
        print("[+] Establish connection response:", response)

        # Sending Connection Parameters
        sock.sendall(cp)
        print("[+] Connection parameters sent.")
        response = sock.recv(1024)
        print("[+] Connection parameters response:", response)

        # Sending User Message
        # Modify data if required
        # data[0x5e] = i
        # data[0x5f] = 0xff
        sock.sendall(data)
        print("[+] User message sent.")
        response = sock.recv(1024)
        print("[+] User message response:", response)

        # Sending Session Acknowledgment
        sock.sendall(sa)
        print("[+] Session acknowledgment sent.")
        response = sock.recv(1024)
        print("[+] Session acknowledgment response:", response)

    print("\n[+] All operations completed successfully.")
    time.sleep(0.3)

except FileNotFoundError as e:
    print(f"File not found: {e}")
except socket.error as e:
    print(f"Socket error: {e}")
except Exception as e:
    print(f"An unexpected error occurred: {e}")
